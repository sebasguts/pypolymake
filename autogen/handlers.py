r"""
Auto generation of Cython files that deal with polymake properties
and small types

This functions in this file are called by setup.py
"""

from __future__ import print_function

import json

header = "# This file was autogenerated! Do not modify!\n"

handler = """
# {pytype} {pmtype}
cdef extern from "wrap.h" namespace "polymake":
    void pm_give_{pytype} "GIVE" (pm_{pytype}, pm_PerlObject*, string) except +
    void pm_call_method_{pytype} "CALL_METHOD" (pm_{pytype}, pm_PerlObject*, string) except +

def give_{pytype}(PerlObject perl_object, bytes prop):
    cdef {pytype} ans = {pytype}.__new__({pytype})
    pm_give_{pytype}(ans.pm_obj, perl_object.pm_obj, prop)
    return ans

def call_method_{pytype}(PerlObject perl_object, bytes prop):
    cdef {pytype} ans = {pytype}.__new__({pytype})
    pm_call_method_{pytype}(ans.pm_obj, perl_object.pm_obj, prop)
    return ans
"""

line_give_map = "    b\"{pmtype}\"{spacing} : give_{pytype},\n"
line_call_method_map = "    b\"{pmtype}\"{spacing} : call_method_{pytype},\n"

decl_imports="""
from .defs cimport *
"""

class_decl="""
cdef extern from "polymake/{name}.h":
    cdef cppclass pm_{pytype} "{pmtype}":
        pass

cdef class {pytype}_auto:
    pm_{pytype} pm_obj
"""

def_imports="""
from .auto_decl cimport *

from libcpp.string cimport string
cdef extern from "<sstream>" namespace "std":
    cdef cppclass ostringstream:
        string str()
"""

class_def="""
cdef extern from "wrap.h" namespace "polymake":
    void pm_{pytype}_repr "WRAP_wrap_OUT" (ostringstream, pm_{pytype})

cdef class {pytype}_auto:
    def __repr__(self):
        cdef ostringstream out
        pm_{pytype}_repr(out, self.pm_obj)
        return (<bytes>out.str()).decode('ascii')
"""

with open('autogen/small_classes.json') as f:
    types = json.load(f)

def all_classes():
    for name,vals in types.items():
        for pytype, pmtype in vals:
            yield {'name': name, 'pytype': pytype, 'pmtype': pmtype}

def write_declarations(filename):
    with open(filename, "w") as output:
        output.write(header)
        output.write(decl_imports)
        for opts in all_classes():
            output.write(class_decl.format(**opts))

def write_definitions(filename):
    with open(filename, "w") as output:
        output.write(header)
        output.write(def_imports)
        for opts in all_classes():
            output.write(class_def.format(**opts))

def write_handlers(filename):
    with open(filename, "w") as output:
        output.write(header)
        for opts in all_classes():
            output.write(handler.format(**opts))

def write_mappings(filename):
    with open(filename, "w") as output:
        output.write(header)

        output.write("cdef dict auto_property_handlers = {\n")
        for opts in all_classes():
            opts.update({'spacing': " "*(40 - len(opts['pmtype']))})
            output.write(line_give_map.format(**opts))
        output.write("}\n")

        output.write("cdef dict auto_method_handlers = {\n")
        for opts in all_classes():
            opts.update({'spacing': " "*(40 - len(opts['pmtype']))})
            output.write(line_call_method_map.format(**opts))
        output.write("}\n")

