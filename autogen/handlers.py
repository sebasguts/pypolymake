r"""
Auto generation of Cython files that deal with polymake properties
and small types

This functions in this file are called by setup.py
"""

from __future__ import print_function

types = [
    ("Integer", "Integer"),
    ("Rational", "Rational"),

    ("ArrayInt", "Array<Int>"),

    ("VectorInteger", "Vector<Integer>"),
    ("VectorRational", "Vector<Rational>"),

    ("MatrixInt", "Matrix<Int>"),
    ("MatrixInteger", "Matrix<Integer, NonSymmetric>"),
    ("MatrixRational", "Matrix<Rational, NonSymmetric>"),

    ("SparseMatrixIntNonSymmetric", "SparseMatrix<Int, NonSymmetric>"),
    ("SparseMatrixRationalNonSymmetric", "SparseMatrix<Rational, NonSymmetric>"),

    ("IncidenceMatrixNonSymmetric", "IncidenceMatrix<NonSymmetric>"),
]

header = "# This file was autogenerated! Do not modify!\n"

handler = """
cdef extern from "wrap.h" namespace "polymake":
    void pm_get1_{pytype} "GIVE" (pm_{pytype}, pm_PerlObject*, string) except +
    void pm_get2_{pytype} "CALL_METHOD" (pm_{pytype}, pm_PerlObject*, string) except +

def handler_{pytype}(PerlObject perl_object, bytes prop):
    cdef {pytype} ans = {pytype}.__new__({pytype})
    try:
        print("  pypolymake debug WARNING: try give")
        pm_get1_{pytype}(ans.pm_obj, perl_object.pm_obj, prop)
    except RuntimeError as msg:
        print("  pypolymake debug WARNING: give failed with\\n{{}}try call_method".format(msg))
        pm_get2_{pytype}(ans.pm_obj, perl_object.pm_obj, prop)
    return ans
"""

line_map = "    b\"{pmtype}\"{spacing} : handler_{pytype},\n"

def write_handlers(filename):
    with open(filename, "w") as output:
        output.write(header)
        for pytype, pmtype in types:
            s = handler.format(pytype=pytype)
            output.write(s)


def write_mappings(filename):
    with open(filename, "w") as output:
        output.write(header)

        output.write("cdef dict auto_handlers = {\n")
        for pytype, pmtype in types:
            spacing = 30 - len(pmtype)
            s = line_map.format(pytype=pytype, pmtype=pmtype, spacing=" "*spacing)
            output.write(s)
        output.write("}\n")

