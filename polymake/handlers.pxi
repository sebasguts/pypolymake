# This file was autogenerated! Do not modify!

def handler_Integer(PerlObject perl_object, bytes prop):
    cdef Integer ans = Integer.__new__(Integer)
    cdef pm_AnyString * cprop = new pm_AnyString(prop, len(prop))
    try:
        sig_on()
        ans.pm_obj = perl_object.pm_obj.give_Integer(cprop[0])
        sig_off()
    except ValueError:
        sig_on()
        ans.pm_obj = perl_object.pm_obj.call_method_Integer(cprop[0])
        sig_off()
    return ans

def handler_Rational(PerlObject perl_object, bytes prop):
    cdef Rational ans = Rational.__new__(Rational)
    cdef pm_AnyString * cprop = new pm_AnyString(prop, len(prop))
    try:
        sig_on()
        ans.pm_obj = perl_object.pm_obj.give_Rational(cprop[0])
        sig_off()
    except ValueError:
        sig_on()
        ans.pm_obj = perl_object.pm_obj.call_method_Rational(cprop[0])
        sig_off()
    return ans

def handler_ArrayInt(PerlObject perl_object, bytes prop):
    cdef ArrayInt ans = ArrayInt.__new__(ArrayInt)
    cdef pm_AnyString * cprop = new pm_AnyString(prop, len(prop))
    try:
        sig_on()
        ans.pm_obj = perl_object.pm_obj.give_ArrayInt(cprop[0])
        sig_off()
    except ValueError:
        sig_on()
        ans.pm_obj = perl_object.pm_obj.call_method_ArrayInt(cprop[0])
        sig_off()
    return ans

def handler_VectorInteger(PerlObject perl_object, bytes prop):
    cdef VectorInteger ans = VectorInteger.__new__(VectorInteger)
    cdef pm_AnyString * cprop = new pm_AnyString(prop, len(prop))
    try:
        sig_on()
        ans.pm_obj = perl_object.pm_obj.give_VectorInteger(cprop[0])
        sig_off()
    except ValueError:
        sig_on()
        ans.pm_obj = perl_object.pm_obj.call_method_VectorInteger(cprop[0])
        sig_off()
    return ans

def handler_VectorRational(PerlObject perl_object, bytes prop):
    cdef VectorRational ans = VectorRational.__new__(VectorRational)
    cdef pm_AnyString * cprop = new pm_AnyString(prop, len(prop))
    try:
        sig_on()
        ans.pm_obj = perl_object.pm_obj.give_VectorRational(cprop[0])
        sig_off()
    except ValueError:
        sig_on()
        ans.pm_obj = perl_object.pm_obj.call_method_VectorRational(cprop[0])
        sig_off()
    return ans

def handler_MatrixInt(PerlObject perl_object, bytes prop):
    cdef MatrixInt ans = MatrixInt.__new__(MatrixInt)
    cdef pm_AnyString * cprop = new pm_AnyString(prop, len(prop))
    try:
        sig_on()
        ans.pm_obj = perl_object.pm_obj.give_MatrixInt(cprop[0])
        sig_off()
    except ValueError:
        sig_on()
        ans.pm_obj = perl_object.pm_obj.call_method_MatrixInt(cprop[0])
        sig_off()
    return ans

def handler_MatrixInteger(PerlObject perl_object, bytes prop):
    cdef MatrixInteger ans = MatrixInteger.__new__(MatrixInteger)
    cdef pm_AnyString * cprop = new pm_AnyString(prop, len(prop))
    try:
        sig_on()
        ans.pm_obj = perl_object.pm_obj.give_MatrixInteger(cprop[0])
        sig_off()
    except ValueError:
        sig_on()
        ans.pm_obj = perl_object.pm_obj.call_method_MatrixInteger(cprop[0])
        sig_off()
    return ans

def handler_MatrixRational(PerlObject perl_object, bytes prop):
    cdef MatrixRational ans = MatrixRational.__new__(MatrixRational)
    cdef pm_AnyString * cprop = new pm_AnyString(prop, len(prop))
    try:
        sig_on()
        ans.pm_obj = perl_object.pm_obj.give_MatrixRational(cprop[0])
        sig_off()
    except ValueError:
        sig_on()
        ans.pm_obj = perl_object.pm_obj.call_method_MatrixRational(cprop[0])
        sig_off()
    return ans
